@model DemoWebApplication.Models.ItemDetailM


@{
    Layout = null; //solve by select2 not function jquery error
}

@{
    /**/

    if (ViewBag.Message != null)
    {
        <script type="text/javascript">
            alert(@Html.Raw(Json.Encode(ViewBag.Message)));
        </script>
    }
}
@Styles.Render("~/Content/css")
@Scripts.Render("~/bundles/modernizr")
<script src="~/Scripts/MyJs.js"></script>
<script src="~/Scripts/jquery-3.6.4.min.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js" integrity="sha512-2ImtlRlf2VVmiGZsjm9bEyhjGW4dU7B6TNwh/hx/iSByxNENtj3WVE6o/9Lj4TJeVXPi4bnOIMXFIJJAeufa0A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" integrity="sha512-nMNlpuaDPrqlEls3IX/Q56H36qvBASwb3ipuo3MxeWbsQB1881ox0cRv7UPTgBlriqoynt35KjEwgGUeUXIPnw==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<h2>Create New Item</h2>
<hr />

@using (Html.BeginForm())
{

    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(x => x.ItemdetailId)
        <div class="col-md-6">
            <div class="form-group">

                @Html.LabelFor(x => x.ItemName, "ItemName", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="row-fluid col-md-10">
                    @* @Html.DropDownListFor(x => x.ItemName, Model.itemDetailList, "--Select--", new { @class = "form-control" })*@
                    @Html.DropDownListFor(x => x.ItemMasterId, Model.itemDetailList, "--Select--", new { @class = "form-control", data_live_search = "true" })
                    @Html.ValidationMessageFor(x => x.ItemName, "", new { @class = "text-danger" })

                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ItemType, "Item Type", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(x => x.ItemType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(x => x.ItemType, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Godown, "Godown Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(x => x.GodownId, Model.lstgodowns, "--Select--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Godown, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Unit, "Unit", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(x => x.UnitId, Model.lstunits, "-- Select --", new { @class = "form-control" })
                    @*@Html.DropDownList("BrandID", TryCast(ViewBag.BrandID, SelectList), ViewBag.DefaultBrand, htmlAttributes:= New With { .class = "form-control"}))*@
                    @Html.ValidationMessageFor(x => x.Unit, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.BatchName, "Batch", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @*@Html.DropDownListFor(x => x.BatchName, new SelectList(Model.lstbatches, "Value", "Text"), "--Select--", new { @class = "form-control" })*@
                    @Html.HiddenFor(x => x.BatchName)
                    @Html.DropDownListFor(model => model.BatchId, Model.lstbatches, "Select an option", new { @class = "select2-searchable form-control" })
                    @*<select id="BatchName" name="BatchName" placeholder="Enter BatchName" style="width:50%">
                            {
                            <option value="@Model.BatchId">@Model.BatchName  </option>
                            }
                        </select>*@
                    @Html.ValidationMessageFor(x => x.BatchName, "", new { @class = "text-danger" })

                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.DiscPer, "Disc %", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(x => x.DiscPer, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.DiscPer, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(x => x.mfrdate, "MFR Date", new { @class = "control-label col-md-3" })
                <div>
                    @Html.CheckBox(name: "chk_Mfr", isChecked: false, htmlAttributes: new { @class = "col-md-1" })
                    @Html.TextBoxFor(x => x.mfrdate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control datepicker col-md-7" })
                    @Html.ValidationMessageFor(x => x.mfrdate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Expirydate, "Expiry date", new { @class = "control-label col-md-3" })
                <div>
                    @Html.CheckBox(name: "chk_Exp", isChecked: false, htmlAttributes: new { @class = "col-md-1" })
                    @Html.TextBoxFor(x => x.Expirydate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control datepicker col-md-7" }) @*, @Value = new DateTime()*@
                    @Html.ValidationMessageFor(x => x.Expirydate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.PurchasePrice, "Purchase Price", new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(x => x.PurchasePrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.PurchasePrice, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.MRP, "MRP", new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(x => x.MRP, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.MRP, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.OpeningStock, "Opening Stock", new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(x => x.OpeningStock, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.OpeningStock, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ClosingStock, "Closing Stock", new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(x => x.ClosingStock, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(x => x.ClosingStock, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-1 col-md-10">
                <input type="submit" value="save" id="btn_Save" class="btn btn-default" onclick='return Validation()' />
                <form action="Edit" method="post">
                    <input type="submit" value="Update" id="btn_Modify" class="btn btn-default" typeof="post" /> @*onclick="window.location.href='@Url.Action("Edit", "ItemDetail")'*@
                </form>
                <input type="button" value="Show All" id="btn_ShowAll" class="btn btn-default" onclick="window.location.href='@Url.Action("Index","ItemDetail")'" />
            </div>
        </div>
    </div>

    <script type="text/javascript">


        $(document).ready(function () {

            //$('.select2-searchable').select2({
            //    theme: 'bootstrap',
            //    width: '100%',
            //    //minimumResultsForSearch: Infinity
            //});
                    $('#Expirydate').attr('disabled', 'disabled');
                    $('#mfrdate').attr('disabled', 'disabled');
                    //$("#ItemType").attr('disabled', 'disabled');
                    //$("#ClosingStock").attr('disabled', 'disabled');
                    $('#ClosingStock').val($('#OpeningStock').val());
                        //$('#ClosingStock').text($('#OpeningStock').val());
                        if ($('#ItemName').val() != "") {
                            //alert($('#ItemName').val());

                        }
                    $('#chk_Exp').change(function() {
                            debugger;
                        $('#chk_Exp').val(this.checked);
                            if (this.checked) {
                            //var returnVal = confirm("Are you sure?");
                            //$(this).prop("checked", returnVal);
                            $('#chk_Exp').val(this.checked);
                                $('#Expirydate').removeAttr('disabled');
                               // $('#Expirydate').val(Date.now());
                                    // $('#Expirydate').datepicker('setDate', new Date());
                                }
                        else {
                            $('#Expirydate').attr('disabled', 'disabled');
                                }
                                });

                    $('#chk_Mfr').change(function() {
                        $('#chk_Mfr').val(this.checked);
                                if (this.checked) {
                            //var returnVal = confirm("Are you sure?");
                            //$(this).prop("checked", returnVal);
                            $('#chk_Mfr').val(this.checked);
                            $('#mfrdate').removeAttr('disabled');
                                        //$('#chk_Mfr').val(Date.now());
                                    }
                        else {
                            $('#mfrdate').attr('disabled', 'disabled');
                                    }
                                    });

                    $('#ItemMasterId').change(function() {
                        var ItemCode = $('#ItemMasterId').val();
                        var getReportColumnsParams = {
                            "ItemCode": ItemCode
                        };
                        //alert(ItemCode);
                        $.ajax({
                                url: "/ItemDetail/GetItemTypeData",
                            type: "POST",
                            dataType: 'json',
                            data: { itemcode: ItemCode },
                            success: function (result) {
                                //console.log(result);
                                $("#ItemType").val(result.TypeName);
                                        //$("#ItemType").attr("disable", "Disable");
                                        //$("#ItemType").attr('disabled', 'disabled');
                                    },
                            error: function(err) {
                                        console.log(err);
                                        alert("Error");
                                    }
                        });

                     });

                    $('#OpeningStock').keyup(function() {

                        // $('#ClosingStock').val($('#OpeningStock').val());
                        $('#ClosingStock').get(0).value = $('#OpeningStock').val();

                            });
                    $('#btn_Save').click(function Validation() {
                        if ($('#ItemMasterId').val() == "") {
                                    alert(" Please Enter Item Name");
                                    return false;
                                }
                        else if ($('#GodownId').val() == "") {
                                    alert(" Please Enter Godown Name");
                                    return false;
                                }
                        else if ($('#UnitId').val() == "") {
                                    alert(" Please Enter Unit For Item");
                                    return false;
                                }
                        else if ($('#OpeningStock').val() == "") {
                                    alert(" Please Enter Opening Stock");
                                    return false;
                                }
                        else if ($('#OpeningStock').val() == 0) {
                                    alert(" Please Enter Opening Stock");
                                    return false;
                        }

                     });
            $('#btn_Modify').click(function Validation() {
                if ($('#ItemMasterId').val() == "") {
                    alert(" Please Enter Item Name");
                    return false;
                }
                else if ($('#GodownId').val() == "") {
                    alert(" Please Enter Godown Name");
                    return false;
                }
                else if ($('#UnitId').val() == "") {
                    alert(" Please Enter Unit For Item");
                    return false;
                }
                else if ($('#OpeningStock').val() == "") {
                    alert(" Please Enter Opening Stock");
                    return false;
                }
                else if ($('#OpeningStock').val() == 0) {
                    alert(" Please Enter Opening Stock");
                    return false;
                }

            });

            BatchName = $("#BatchId").select2({
                            ajax:
                                {
                                url: '@Url.Action("GetBatchDetails", "ItemDetail")',
                            dataType: 'json',
                            delay: 1000,
                            data: function(params) {
                                        return { searchText: params.term };
                                    },
                            processResults: function(data, params) {
                                        return { results: data};
                                    },
                            cache: true
                                },
                        tags: true,
                        createTag: function(params) {
                                    return {
                                    id: params.term,
                                text: params.term,
                                newOption: true
                                        }
                                },
                        templateResult: function(data) {
                                    var $result = $("<span></span>");
                                        $result.text(data.text);
                                    // tabindex: 3;
                                    if (data.newOption)
                                    {
                                $result.append(" <em>(new)</em>");
                                    }
                                    return $result;
                                },
                        escapeMarkup: function(markup) { return markup; }, // let our custom formatter work
                        minimumInputLength: 2,
                    }).on('select2:select', function() {
                        $("#DiscPer").focus();
                            });
        });

        $('#BatchId').change(function () {
            var Batchname = $(this).children('option:selected').text();
            //alert(Batchname);
            $('#BatchName').val(Batchname);
        });
    </script>
}
