@model DemoWebApplication.Models.SalesInvoice
<html>
<head>
    @{
        Layout = null;
        if (ViewBag.Message != null)
        {
            <script type="text/javascript">
            alert(@Html.Raw(Json.Encode(ViewBag.Message)));
            </script>
        }
    }
    <div style="align-content:center"><h3>Sales Invoice</h3></div>

    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <script src="~/Scripts/MyJs.js"></script>
    <script src="~/Scripts/jquery-3.6.4.min.js"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js" integrity="sha512-2ImtlRlf2VVmiGZsjm9bEyhjGW4dU7B6TNwh/hx/iSByxNENtj3WVE6o/9Lj4TJeVXPi4bnOIMXFIJJAeufa0A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" integrity="sha512-nMNlpuaDPrqlEls3IX/Q56H36qvBASwb3ipuo3MxeWbsQB1881ox0cRv7UPTgBlriqoynt35KjEwgGUeUXIPnw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script>
        var currentrow = 0;
        $(document).ready(function () {
            $("#CAddress").keydown(function (e) {
                //debugger;
                if (e.keyCode == 13) {
                    $("#Phoneno").focus();
                }
                //debugger;
            });

            $("#Phoneno").keydown(function (e) {
                //debugger;
                if (e.keyCode == 13) {
                    $("#ItemName").focus();
                }
                //debugger;
            });
            $("#qty").keydown(function (e) {
                var code = e.keyCode || e.which;
                // debugger;
                if (code == 13 || code == 9) { //Enter keycode or Tab keycode
                    $("#MRP").focus();
                }
            });

            $("#MRP").keydown(function (e) {
                var code = e.keyCode || e.which;
                if (code == 13 || code == 9) { //Enter keycode
                    $("#disc").focus();
                }
            });

        });

        $(document).ready(function () {
            var itemname, batch, godown, expdate, HSNCode, Itemtype = ""
            var Gst, MRP, disc, PurPrice, salesprice, qty, DiscAmt = 0
            $('#Accountname').change(function () {
                var AccountCode = $(this).children('option:selected').val();
                //alert(AccountCode);
                $.ajax({
                    url: "/SalesInvoice/GetCustomerData",
                    type: "Post",
                    dataType: "json",
                    data: { id: AccountCode },
                    success: function (result) {
                        //console.log(result);
                        //alert("success");
                        $("#CAddress").val(result.Address);
                        $("#Phoneno").val(result.MobileNo);
                    },
                    error: function (err) {
                        alert(err);
                    }
                });
            });

            $('#disc').keydown(function (e) {
                if (e.keyCode == 13) {
                    var ItemDetailsCode = $("#ItemName").children('option:selected').val();
                    // alert(ItemDetailsCode);
                    itemname = $("#ItemName").val();
                    // alert(itemname);
                    if (itemname == "") {
                        alert("Please Select Valid Item");
                        return;
                    }
                    $.ajax({
                        url: "/SalesInvoice/GetItemsData",
                        type: "post",
                        dataType: "json",
                        data: { code: ItemDetailsCode },
                        success: function (result) {
                            //alert("success");
                            debugger;
                            itemname = result.Itemname;
                            batch = result.Batch;
                            godown = result.Godown;
                            HSNCode = result.HSNCOde;
                            Itemtype = result.ItemType;
                            Gst = result.Gst;
                            MRP = result.mrp;
                            expdate = result.expdate;
                            PurPrice = result.purchaseprice;
                            qty = $("#qty").val();
                            salesprice = $("#MRP").val();
                            disc = $("#disc").val();

                            debugger;
                            var state = $('#CustState option:selected').text();
                            var qty, salesprice, disc, DiscAmount, Gst, Sgst, SGSTAmt, IGSTAMT, NetAmt, TotalAmount = 0;
                            qty = parseFloat(qty) || 0;
                            salesprice = parseFloat(salesprice) || 0;
                            disc = parseFloat(disc) || 0;
                            Gst = Gst;
                            Sgst = Gst / 2;
                            NetAmt = parseFloat((qty * salesprice).toFixed(2));;
                            DiscAmount = parseFloat((NetAmt * disc / 100).toFixed(2));
                            var applygst = $("#ApplyGst").prop("checked");
                            if (applygst) {
                                SGSTAmt = 0; IGSTAMT = 0;
                            }
                            else {
                                if (state == "Maharashtra" || state == "") {
                                    SGSTAmt = parseFloat(((NetAmt - DiscAmount) * (Sgst / 100)).toFixed(2));
                                    IGSTAMT = 0;
                                }
                                else {
                                    IGSTAMT = parseFloat(((NetAmt - DiscAmount) * (Gst / 100)).toFixed(2));
                                    SGSTAmt = 0;
                                }
                            }

                            TotalAmount = parseFloat(((NetAmt - DiscAmount) + (SGSTAmt * 2)).toFixed(2));
                            var row = $('<tr/>');
                            row.append("<td>" + 1 + "</td>");
                            row.append("<td>" + ItemDetailsCode + "</td>");
                            row.append("<td>" + '<label  name="itemname" >' + itemname + '</label>' + "</td>");
                            row.append("<td>" + batch + "</td>");
                            row.append("<td>" + godown + "</td>");
                            row.append("<td>" + expdate + "</td>");
                            //row.append("<td>" + HSNCode + "</td>");
                            row.append("<td>" + '<input type="text"  name="Qty"  value=' + qty + ' size="2" onchange="calculate(this);">' + "</td>");
                            row.append("<td>" + '<input type="text"  name="salesprice"  value=' + salesprice + ' size="2">' + "</td>");
                            row.append("<td>" + '<input type="text"  name="Disc"  value=' + disc + ' size="2">' + "</td>");
                            //row.append("<td>" + salesprice + "</td>");
                            //row.append("<td>" + Disc + "</td>");
                            row.append("<td>" + '<label  name="DiscAmt" >' + DiscAmount + '</label>' + "</td>");
                            row.append("<td>" + '<label  name="netamt" >' + NetAmt + '</label>' + "</td>");
                            row.append("<td>" + '<label  name="GstPer">' + Gst + '</label>' + "</td>");
                            //row.append("<td>" + Gst + "</td>");
                            row.append("<td>" + '<label  name="IGstAmt">' + IGSTAMT + '</label>' + "</td>");
                            row.append("<td>" + '<label  name="SGstAmt">' + SGSTAmt + '</label>' + "</td>");
                            row.append("<td>" + '<label  name="CGstAmt">' + SGSTAmt + '</label>' + "</td>");
                            row.append("<td>" + '<label  name="TotalAmt">' + TotalAmount + '</label>' + "</td>");
                            row.append("<td>" + MRP + "</td>");
                            row.append("<td>" + PurPrice + "</td>");
                            $("#tbl_body").append(row);

                            $("#qty").val('');
                            $("#MRP").val('');
                            $("#disc").val('');
                            $("#ItemName").children('option:selected').remove();
                            calculate();
                            GetTotal();
                            return false;
                        },
                        error: function (err) {
                            console.log(err);
                            alert("Error");
                        }
                    });

                    //var row = "<tr><td>" + 1 + "</td><td>" + ItemDetailsCode + "</td><td>" + itemname + "</td><td>" + batch + "</td><td>" + godown + "</td><td>" + expdate + "</td><td>" + HSNCode + "</td><td>" + Qty + "</td><td>" + salesprice + "</td><td>" + Disc + "</td><td>" + 0 + "</td><td>" + 0 + "</td><td>" + Gst + "</td><td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td><td>" + MRP + "</td><td>" + PurPrice + "</td></tr>";
                    //$("#tbl_body").append(row);

                    //var row = "<tr><td>" + 1 + "</td><td>" + ItemDetailsCode + "</td><td>" + itemname + "</td><td>" + batch + "</td><td>" + godown + "</td><td>" + expdate + "</td><td>" + HSNCode + "</td><td>" + Qty + "</td><td>" + salesprice + "</td><td>" + Disc + "</td><td>" + 0 + "</td><td>" + 0 + "</td><td>" + Gst + "</td><td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td><td>" + 0 + "</td><td>" + MRP + "</td><td>" + PurPrice + "</td></tr>";
                    //$("table#tbl_body").append(row);

                }
            });

            function calculate() {
                var index = currentrow;
                $('table input[type="text"]').keyup(function (e) {
                    //debugger;
                    // Find the index of the clicked input element's parent cell
                    index = $(this).parent().parent().index();
                    PriceF(index);
                    GetTotal();
                });
                $('table input[type="text"]').click(function () {
                    //debugger;
                    // Find the index of the clicked input element's parent cell
                    index = $(this).parent().parent().index();
                    PriceF(index);
                    GetTotal();
                });

            }
            function PriceF(index) {
                //debugger;
                var state = $('#CustState option:selected').text();
                var qty, salesprice, disc, DiscAmount, Gst, Sgst, SGSTAmt, IGSTAMT, NetAmt, TotalAmount = 0;
                qty = document.getElementsByName("Qty")[index].value;
                salesprice = document.getElementsByName("salesprice")[index].value;
                disc = document.getElementsByName("Disc")[index].value;
                Gst = document.getElementsByName("GstPer")[index].innerText;
                Sgst = Gst / 2;
                NetAmt = qty * salesprice;
                DiscAmount = NetAmt * disc / 100;
                var applygst = $("#ApplyGst").prop("checked");
                if (applygst) {
                    SGSTAmt = 0; IGSTAMT = 0;
                }
                else {
                    if (state == "Maharashtra" || state == "") {
                        SGSTAmt = (NetAmt - DiscAmount) * (Sgst / 100);
                        IGSTAMT = 0;
                    }
                    else {
                        IGSTAMT = (NetAmt - DiscAmount) * (Gst / 100);
                        SGSTAmt = 0;
                    }
                }

                TotalAmount = (NetAmt - DiscAmount) + (SGSTAmt * 2);
                document.getElementsByName("netamt")[index].innerText = parseFloat(NetAmt.toFixed(2));
                document.getElementsByName("SGstAmt")[index].innerText = parseFloat(SGSTAmt.toFixed(2));
                document.getElementsByName("CGstAmt")[index].innerText = parseFloat(SGSTAmt.toFixed(2));
                document.getElementsByName("IGstAmt")[index].innerText = parseFloat(IGSTAMT.toFixed(2));
                document.getElementsByName("TotalAmt")[index].innerText = parseFloat(TotalAmount.toFixed(2));
                document.getElementsByName("DiscAmt")[index].innerText = parseFloat(DiscAmount.toFixed(2));

            }
            function GetTotal() {
                debugger;
                //alert("Get Total Called");
                let count, i, NetAmount = 0, GstAmount = 0, TotalAmount = 0, paidamount = 0, BalanceAmt = 0;
                count = document.getElementsByName("Qty");
                for (i = 0; i <= count.length - 1; i++) {
                    NetAmount = NetAmount + parseFloat(document.getElementsByName("netamt")[i].innerText);
                    GstAmount = GstAmount + parseFloat(document.getElementsByName("SGstAmt")[i].innerText);
                    GstAmount = GstAmount + parseFloat(document.getElementsByName("CGstAmt")[i].innerText);
                    GstAmount = GstAmount + parseFloat(document.getElementsByName("IGstAmt")[i].innerText);
                    TotalAmount = TotalAmount + parseFloat(document.getElementsByName("TotalAmt")[i].innerText);
                }
                paidamount = $("#Paidamount").val();
                BalanceAmt = parseFloat((TotalAmount - paidamount).toFixed(2));
                NetAmount = parseFloat(NetAmount.toFixed(2));
                GstAmount = parseFloat(GstAmount.toFixed(2));
                TotalAmount = parseFloat(TotalAmount.toFixed(2));
                $("#NetAmout").val(NetAmount);
                $("#GstAmount").val(GstAmount);
                $("#Totalbillamount").val(TotalAmount);
                $("#Balanceamount").val(BalanceAmt);
            }
            $("#Paidamount").change(function () {
                Calculate_BalanceAmt();
            });
            $("#Paidamount").keyup(function (e) {
                Calculate_BalanceAmt();
            });

            function Calculate_BalanceAmt() {
                let TotalAmount = 0, paidamount = 0, BalanceAmt = 0;
                paidamount = $("#Paidamount").val();
                TotalAmount = $("#Totalbillamount").val();
                BalanceAmt = parseFloat((TotalAmount - paidamount).toFixed(2));
                $("#Balanceamount").val(BalanceAmt);
            }
            $("#CustState").change(function () {
                let i, count = 0;
                count = document.getElementsByName("Qty");
                for (i = 0; i <= count.length - 1; i++) {
                    PriceF(i)
                }
                GetTotal();
            });
            $("#ApplyGst").change(function () {
                let i, count = 0;
                count = document.getElementsByName("Qty");
                for (i = 0; i <= count.length - 1; i++) {
                    PriceF(i)
                }
                GetTotal();
            });

            
        });
    </script>
    <script type="text/javascript">




        $(document).ready(function () {
        AccountName = $("#Accountname").select2({

                            ajax:
                                {
                                url: '@Url.Action("GetCustomerName", "SalesInvoice")',
                            dataType: 'json',
                            delay: 1000,
                            data: function(params) {
                                        return { searchText: params.term };
                                    },
                                processResults: function (data, params) {

                                        return { results: data};
                                    },
                            cache: true
                                },
                        tags: true,
                        createTag: function(params) {
                                    return {
                                    id: params.term,
                                text: params.term,
                                newOption: true
                                        }
                                },
                        templateResult: function(data) {
                                    var $result = $("<span></span>");
                                        $result.text(data.text);
                                    // tabindex: 3;
                                    if (data.newOption)
                                    {
                                $result.append(" <em>(new)</em>");
                                    }
                                    return $result;
                                },
                        escapeMarkup: function(markup) { return markup; }, // let our custom formatter work
                        minimumInputLength: 2,
                    }).on('select2:select', function() {
                        $("#CAddress").focus();
            });
        ItemName = $("#ItemName").select2({

                            ajax:
                                {
                                url: '@Url.Action("GetItemByName", "SalesInvoice")',
                            dataType: 'json',
                            delay: 1000,
                                data: function (params) {
                                    //debugger;
                                        return { searchText: params.term };
                                    },
                                processResults: function (data, params) {

                                        return { results: data};
                                    },
                            cache: true
                                },
                        tags: true,
                        createTag: function(params) {
                                    return {
                                    id: params.term,
                                text: params.term,
                                newOption: true
                                        }
                                },
            templateResult: function (data) {
                //debugger;
                var $result = $("<span></span>");

                                        $result.text(data.text);
                // tabindex: 3;
               // alert(data.text);
                                    if (data.newOption)
                                    {
                                $result.append(" <em>(new)</em>");
                                    }
                return $result;
                //debugger;
                                },
                        escapeMarkup: function(markup) { return markup; }, // let our custom formatter work
                        minimumInputLength: 2,
                    }).on('select2:select', function() {
                        $("#qty").focus();
                });
        });



    </script>
</head>
<body>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-horizontal col-md-12">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.HiddenFor(x => x.Accountnumber)
                    @Html.LabelFor(x => x.Accountname, "Cust. Name", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(x => x.Accountname, Model.lst_CustomerNameList, "", new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.Accountname, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.CAddress, "Address", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(x => x.CAddress, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.CAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Phoneno, "Mobile No", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(x => x.Phoneno, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.Phoneno, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(x => x.Billno, "Bill No", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(x => x.Billno, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.Billno, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Invoicedate, "Bill Date", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(x => x.Invoicedate, "", new { htmlAttributes = new { @type = "date", @class = "form-control datepicker", @Value = Model.Invoicedate.ToString("yyyy-MM-dd") } })
                        @Html.ValidationMessageFor(x => x.Invoicedate, "", new { @class = "text=danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Duedate, "Due Date", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(x => x.Duedate, "", new { htmlAttributes = new { @type = "date", @class = "form-control datepicker", @Value = Model.Duedate.ToString("yyyy-MM-dd") } })
                        @Html.ValidationMessageFor(x => x.Duedate, "", new { @class = "text=danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(x => x.Manualno, "Manual No", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(x => x.Manualno, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.Manualno, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.CustState, "State", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(x => x.lst_State, Model.lst_State, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.CustState, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.PaymentmodeCash, "Payment Mode", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.RadioButtonFor(x => x.PaymentmodeCash, "Cash", new { @checked = "checked" })
                        @Html.Label("Cash")
                        @*<label class="btn btn-outline-primary">Cash</label>*@
                        @Html.RadioButtonFor(x => x.PaymentmodeCash, "Credit")
                        @Html.Label("Credit")
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-4"></label>
                    <div class="col-md-8">
                        @Html.CheckBoxFor(x => x.ApplyGst)
                        @Html.Label("Don't Apply Gst")
                    </div>
                </div>

            </div>
        </div>
        <hr />
        <div class="form-horizontal col-md-12">
            <div class="form-group col-md-3">
                @Html.HiddenFor(x => x.Itemdetailid)
                @Html.LabelFor(x => x.ItemName, "Item Name", htmlAttributes: new { @class = "control-label " })
                @Html.DropDownListFor(x => x.ItemName, Model.lst_ItemName, "", new { @class = "form-control " })
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(x => x.qty, "Qty", htmlAttributes: new { @class = "control-label " })
                @Html.EditorFor(x => x.qty, new { htmlAttributes = new { @class = "form-control " } })
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(x => x.MRP, "Price", htmlAttributes: new { @class = "control-label " })
                @Html.EditorFor(x => x.MRP, new { htmlAttributes = new { @class = "form-control " } })
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(x => x.disc, "Disc %", htmlAttributes: new { @class = "control-label " })
                @Html.EditorFor(x => x.disc, new { htmlAttributes = new { @class = "form-control " } })
            </div>
        </div>
        <div class="col-md-12">
            @* Grid Design *@
            <table class="table" border="1" id="tbl_sales">
                <thead>
                    <tr>
                        <th>Sr</th>
                        <th>Item Code</th> @*style="display:none"*@
                        <th>Item Name</th>
                        <th>Batch </th>
                        <th>Godown</th>
                        <th>Expiry Date</th>
                        @*<th>HSN Code</th>*@
                        <th>Qty</th>
                        <th>Price</th>
                        <th>Disc %</th>
                        <th>Disc Amt</th>
                        <th>Net Amt</th>
                        <th>GST %</th>
                        <th>IGSTAMT</th>
                        <th>SGSTAMT</th>
                        <th>CGSTAMT</th>
                        <th>Total Amt</th>
                        <th>MRP</th>
                        <th>Pur.Prise</th>
                    </tr>
                </thead>
                <tbody id="tbl_body">
                    @*<tr id="tr_row">
                            <td>Sr</td>
                            <td>Item Code</td>
                            <td>Item Name</td>
                            <td>Batch </td>
                            <td>Godown</td>
                            <td>Expiry Date</td>
                            <td>HSN Code</td>
                            <td>Qty</td>
                            <td>Price</td>
                            <td>Disc %</td>
                            <td>Disc Amt</td>
                            <td>Net Amt</td>
                            <td>GST %</td>
                            <td>IGSTAMT</td>
                            <td>SGSTAMT</td>
                            <td>CGSTAMT</td>
                            <td>Total Amt</td>
                            <td>MRP</td>
                            <td>Pur.Prise</td>
                        </tr>*@
                </tbody>

            </table>
        </div>
        <div class="form-horizontal col-md-12">
            @* Footer *@
            <div class="col-md-4"></div>
            <div class="col-md-4">
                <div class="form-group" style="height:35px">

                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Paidamount, "Paid Amount", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(x => x.Paidamount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.Paidamount, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Balanceamount, "Balance Amount", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(x => x.Balanceamount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.Balanceamount, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(x => x.NetAmout, "Net Amount", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(x => x.NetAmout, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.NetAmout, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.GstAmount, "GST Amount", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(x => x.GstAmount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.GstAmount, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.Totalbillamount, "Total Amount", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(x => x.Totalbillamount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.Totalbillamount, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
        </div>
        <div class="form-horizontal">
            <div class="col-md-offset-5">
                <form action="CreateInvoice" method="post">
                    <input type="button" id="btn_save" value="Save" class="btn btn-default" typeof="post" onclick='return  Validation()' />
                </form>
            </div>
        </div>


    }
</body>

</html>
<script type="text/javascript">
    function Validation() {
        debugger;
        var AccountCode = "";
        AccountCode = $("#Accountname").children('option:selected').text();
        if (AccountCode == "" || AccountCode == "undefined") {
            alert("Please Select Valid Customer");
            return false;
        }
        else {
            
        }
        var i,rowcount = 0;
        rowcount = document.getElementsByName("GstPer");
        if (rowcount.length == 0) {
            alert("Please enter at list one item");
            return false;
        }
        for (i = 0; i <= rowcount.length - 1; i++) {
            var Qty = document.getElementsByName("Qty")[i].value;
            if (Qty == 0) {
                alert("Please enter Qty for item " + document.getElementsByName("itemname")[i].innerText);
                return false;
            }
            var SalesPrice = document.getElementsByName("salesprice")[i].value;
            if (SalesPrice == 0) {
                alert("Please enter Price for item " + document.getElementsByName("itemname")[i].innerText);
                return false;
            }
        }
        //var formData = $("#myForm").serialize();
        //$.post("CreateInvoice", formData)
        //    .done(function (response) {
        //        // Handle the successful response from the server
        //        alert("POST request successful");
        //    })
        //    .fail(function (xhr, status, error) {
        //        // Handle any error that occurred during the request
        //        alert("Error");
        //    });
    }
</script>
