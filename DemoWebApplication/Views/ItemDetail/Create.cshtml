@model DemoWebApplication.Models.ItemDetailM

@{
    if (ViewBag.Message != null)
    {
        <script type="text/javascript">
            @Html.Raw(Json.Encode(ViewBag.Message));
        </script>
    }
}

<h2>Create New Item</h2>
<hr />
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(x => x.ItemdetailId)
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(x => x.ItemName, "ItemName", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="row-fluid col-md-10">
                    @* @Html.DropDownListFor(x => x.ItemName, Model.itemDetailList, "--Select--", new { @class = "form-control" })*@
                    @Html.DropDownListFor(x => x.ItemName, Model.itemDetailList, "--Select--", new { @class = "form-control", data_live_search = "true" })
                    @Html.ValidationMessageFor(x => x.ItemName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ItemType, "Item Type", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(x => x.ItemType,new {htmlAttributes=new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.ItemType, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Godown, "Godown Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(x => x.Godown, Model.lstgodowns, "--Select--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Godown, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Unit, "Unit", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(x => x.Unit, Model.lstunits, "--Select--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Unit, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.BatchName, "Batch", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(x => x.BatchName, Model.lstbatches, "--Select--", new { @class = "form-control" })
                    @Html.HiddenFor(x => x.BatchId)
                    @Html.ValidationMessageFor(x => x.BatchName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.DiscPer, "Disc %", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(x => x.DiscPer, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.DiscPer, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(x => x.mfrdate, "MFR Date", new { @class = "control-label col-md-3" })
                <div>
                    @Html.CheckBox(name: "chk_Mfr", isChecked: false, htmlAttributes: new { @class = "col-md-1" })
                    @Html.TextBoxFor(x => x.mfrdate, new { @type = "date", @class = "form-control datepicker col-md-8", @Value = new DateTime() })
                    @Html.ValidationMessageFor(x => x.mfrdate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Expirydate, "Expiry date", new { @class = "control-label col-md-3" })
                <div>
                    @Html.CheckBox(name: "chk_Exp", isChecked: false, htmlAttributes: new { @class = "col-md-1" })
                    @Html.TextBoxFor(x => x.Expirydate, new { @type = "date", @class = "form-control datepicker col-md-8", @Value = new DateTime() })
                    @Html.ValidationMessageFor(x => x.Expirydate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.PurchasePrice , "Purchase Price", new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(x => x.PurchasePrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.PurchasePrice, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.MRP, "MRP", new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(x => x.MRP, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.MRP, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.OpeningStock, "Opening Stock", new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(x => x.OpeningStock, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.OpeningStock, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ClosingStock, "Closing Stock", new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(x => x.ClosingStock, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(x => x.ClosingStock, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="save" id="btn_Save" class="btn btn-default" />
            </div>
        </div>
    </div>

    <script type="text/javascript">
        $(document).ready(function () {
            $('#Expirydate').attr('disabled', 'disabled');
            $('#mfrdate').attr('disabled', 'disabled');
            $("#ItemType").attr('disabled', 'disabled');
            $("#ClosingStock").attr('disabled', 'disabled');

            $('#chk_Exp').change(function () {
               // debugger;
                $('#chk_Exp').val(this.checked);
                if (this.checked) {
                    //var returnVal = confirm("Are you sure?");
                    //$(this).prop("checked", returnVal);
                    $('#chk_Exp').val(this.checked);
                    $('#Expirydate').removeAttr('disabled');
                   // $('#Expirydate').datepicker({ dateFormat: 'dd/MMM/yyyy' });
                   // $('#Expirydate').datepicker('setDate', new Date());
                }
                else {
                    $('#Expirydate').attr('disabled', 'disabled');
                }
            });

            $('#chk_Mfr').change(function () {
                $('#chk_Mfr').val(this.checked);
                if (this.checked) {
                    //var returnVal = confirm("Are you sure?");
                    //$(this).prop("checked", returnVal);
                    $('#chk_Mfr').val(this.checked);
                    $('#mfrdate').removeAttr('disabled');
                    //$('#chk_Mfr').val(Date.now());
                }
                else {
                    $('#mfrdate').attr('disabled', 'disabled');
                }
            });

            $('#ItemName').change(function () {
                var ItemCode = $('#ItemName').val();
                var getReportColumnsParams = {
                    "ItemCode": ItemCode
                };
                //alert(ItemCode);
               $.ajax({
                    url: "/ItemDetail/GetItemTypeData",
                    type: "POST",
                    dataType: 'json',
                    data: { itemcode: ItemCode },
                    success: function (result) {
                        //console.log(result);
                        $("#ItemType").val(result.TypeName);
                        //$("#ItemType").attr("disable", "Disable");
                        $("#ItemType").attr('disabled', 'disabled');
                    },
                    error: function (err) {
                        console.log(err);
                        alert("Error");
                    }
                });
                //$.ajax({
                //    url: "/ItemDetail/GetitemDetails",
                //    Method: "Get",
                //    success: function (result) {
                //        console.log(result);
                //        result = JSON.parse(result);
                //        console.log(result);
                //        //$("#ItemType").val(result.ItemType)
                //        document.getElementById('ItemType').value = result.ItemType
                //        $("#DiscPer").val(result.DiscPer);

                //    },
                //    error: function (err) {
                //        console.log(err);
                //    }
                //})
            });

            $('#OpeningStock').keyup(function () {
                
                //$('#ClosingStock').val($('#OpeningStock').val());
                $('#ClosingStock').get(0).value = $('#OpeningStock').val();
            });

        });
    </script>
}
